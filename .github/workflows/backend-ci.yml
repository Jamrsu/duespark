name: Backend CI

on:
  push:
    branches: [ main, develop ]
    paths:
      - 'sic_backend_mvp_jwt_sqlite/**'
      - '.github/workflows/backend-ci.yml'
  pull_request:
    branches: [ main, develop ]
    paths:
      - 'sic_backend_mvp_jwt_sqlite/**'
      - '.github/workflows/backend-ci.yml'

env:
  PYTHON_VERSION: '3.11'

defaults:
  run:
    working-directory: ./sic_backend_mvp_jwt_sqlite

jobs:
  lint-and-test:
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: test
          POSTGRES_USER: test
          POSTGRES_DB: test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
    - name: Checkout code
      uses: actions/checkout@v5

    - name: Set up Python ${{ env.PYTHON_VERSION }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements-dev.txt

    - name: Run Black (code formatting check)
      run: black --check --diff .

    - name: Run isort (import sorting check)
      run: isort --check-only --diff .

    - name: Run Flake8 (linting)
      run: flake8 . --extend-ignore=E203,W503

    - name: Run MyPy (type checking)
      run: mypy .

    - name: Run Bandit (security scanning)
      run: bandit -r . -f json -o bandit-report.json

    - name: Upload Bandit results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: bandit-results
        path: sic_backend_mvp_jwt_sqlite/bandit-report.json

    - name: Set up test database
      env:
        DATABASE_URL: postgresql://test:test@localhost:5432/test
      run: |
        export PYTHONPATH=$PWD
        python -c "
        import os
        os.environ['DATABASE_URL'] = 'postgresql://test:test@localhost:5432/test'
        from app.database import engine, Base
        Base.metadata.create_all(bind=engine)
        "

    - name: Run pytest with coverage
      env:
        DATABASE_URL: postgresql://test:test@localhost:5432/test
        SECRET_KEY: test-secret-key-for-ci
        POSTMARK_API_TOKEN: test-token
        STRIPE_SECRET_KEY: sk_test_fake
        STRIPE_PUBLISHABLE_KEY: pk_test_fake
        STRIPE_WEBHOOK_SECRET: whsec_test_fake
      run: |
        export PYTHONPATH=$PWD
        pytest --cov=app --cov-report=xml --cov-report=term-missing --cov-fail-under=85

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v4
      with:
        file: ./sic_backend_mvp_jwt_sqlite/coverage.xml
        flags: backend
        name: backend-coverage
        fail_ci_if_error: true
        token: ${{ secrets.CODECOV_TOKEN }}

  security-scan:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v5

    - name: Set up Python ${{ env.PYTHON_VERSION }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install safety bandit

    - name: Run Safety (dependency vulnerability check)
      run: safety check --output json > safety-report.json || true
      continue-on-error: true

    - name: Upload Safety results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: safety-results
        path: sic_backend_mvp_jwt_sqlite/safety-report.json

  container-security:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v5

    - name: Build Docker image for scanning
      run: |
        cd sic_backend_mvp_jwt_sqlite
        docker build -t duespark-backend:scan .

    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: 'duespark-backend:scan'
        format: 'sarif'
        output: 'trivy-results.sarif'

    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'

  secrets-scan:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v5
      with:
        fetch-depth: 0  # Fetch all history for all branches and tags

    - name: Run TruffleHog OSS
      uses: trufflesecurity/trufflehog@main
      with:
        path: ./
        base: ${{ github.event.repository.default_branch }}
        head: HEAD
        extra_args: --debug --only-verified

  infrastructure-security:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v5

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'

    - name: Install Checkov
      run: pip install checkov

    - name: Run Checkov Infrastructure Security Analysis
      run: |
        checkov --framework dockerfile --file sic_backend_mvp_jwt_sqlite/Dockerfile --output json --output-file checkov-dockerfile.json || true
        checkov --framework github_actions --directory .github/workflows --output json --output-file checkov-workflows.json || true

    - name: Upload Checkov results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: checkov-results
        path: |
          checkov-dockerfile.json
          checkov-workflows.json

  sast-analysis:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v5

    - name: Initialize CodeQL
      uses: github/codeql-action/init@v3
      with:
        languages: python

    - name: Autobuild
      uses: github/codeql-action/autobuild@v3

    - name: Perform CodeQL Analysis
      uses: github/codeql-action/analyze@v3

  production-readiness:
    runs-on: ubuntu-latest
    needs: [lint-and-test, security-scan, container-security, secrets-scan, infrastructure-security]
    if: github.ref == 'refs/heads/main'
    steps:
    - name: Checkout code
      uses: actions/checkout@v5

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'

    - name: Install dependencies
      run: |
        cd sic_backend_mvp_jwt_sqlite
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Production Configuration Validation
      env:
        DATABASE_URL: postgresql://test:test@localhost:5432/test
        SECRET_KEY: ${{ secrets.SECRET_KEY_TEST }}
      run: |
        cd sic_backend_mvp_jwt_sqlite
        python -c "
        import os
        from app.auth import SECRET_KEY
        from app.database import engine

        # Validate critical configurations
        assert SECRET_KEY, 'SECRET_KEY not configured'
        assert len(SECRET_KEY) >= 32, 'SECRET_KEY too short'
        assert os.getenv('DATABASE_URL'), 'DATABASE_URL not configured'

        print('✅ Configuration validation passed')
        "

    - name: Health Check Validation
      run: |
        cd sic_backend_mvp_jwt_sqlite
        python -c "
        from app.health_routes import HealthChecker
        from app.database import SessionLocal

        # Test health checker initialization
        with SessionLocal() as db:
            checker = HealthChecker(db)
            print('✅ Health checker initialization passed')
        "

    - name: Security Configuration Check
      run: |
        cd sic_backend_mvp_jwt_sqlite
        python -c "
        import os
        from app.monitoring import monitoring

        # Validate monitoring setup
        assert monitoring.environment, 'Environment not configured'
        print(f'✅ Monitoring configured for: {monitoring.environment}')
        "

    - name: Generate Production Readiness Report
      run: |
        echo '# Production Readiness Report' > production-readiness.md
        echo "Generated: $(date)" >> production-readiness.md
        echo '' >> production-readiness.md
        echo '## Security Checks Passed' >> production-readiness.md
        echo '- ✅ Code quality and linting' >> production-readiness.md
        echo '- ✅ Vulnerability scanning' >> production-readiness.md
        echo '- ✅ Container security' >> production-readiness.md
        echo '- ✅ Secrets scanning' >> production-readiness.md
        echo '- ✅ Infrastructure security' >> production-readiness.md
        echo '- ✅ SAST analysis' >> production-readiness.md
        echo '- ✅ Configuration validation' >> production-readiness.md
        echo '' >> production-readiness.md
        echo '## Deployment Ready' >> production-readiness.md
        echo 'This build has passed all security and quality checks and is ready for production deployment.' >> production-readiness.md

    - name: Upload Production Readiness Report
      uses: actions/upload-artifact@v4
      with:
        name: production-readiness-report
        path: production-readiness.md
