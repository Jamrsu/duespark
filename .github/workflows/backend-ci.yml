name: Backend CI

on:
  push:
    branches: [ main, develop ]
    paths:
      - 'sic_backend_mvp_jwt_sqlite/**'
      - '.github/workflows/backend-ci.yml'
  pull_request:
    branches: [ main, develop ]
    paths:
      - 'sic_backend_mvp_jwt_sqlite/**'
      - '.github/workflows/backend-ci.yml'

env:
  PYTHON_VERSION: '3.11'

defaults:
  run:
    working-directory: ./sic_backend_mvp_jwt_sqlite

jobs:
  lint-and-test:
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: test
          POSTGRES_USER: test
          POSTGRES_DB: test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python ${{ env.PYTHON_VERSION }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements-dev.txt

    - name: Run Black (code formatting check)
      run: black --check --diff .

    - name: Run isort (import sorting check)
      run: isort --check-only --diff .

    - name: Run Flake8 (linting)
      run: flake8 . --extend-ignore=E203,W503

    - name: Run MyPy (type checking)
      run: mypy .

    - name: Run Bandit (security scanning)
      run: bandit -r . -f json -o bandit-report.json
      continue-on-error: true

    - name: Upload Bandit results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: bandit-results
        path: sic_backend_mvp_jwt_sqlite/bandit-report.json

    - name: Set up test database
      env:
        DATABASE_URL: postgresql://test:test@localhost:5432/test
      run: |
        export PYTHONPATH=$PWD
        python -c "
        import os
        os.environ['DATABASE_URL'] = 'postgresql://test:test@localhost:5432/test'
        from app.database import engine, Base
        Base.metadata.create_all(bind=engine)
        "

    - name: Run pytest with coverage
      env:
        DATABASE_URL: postgresql://test:test@localhost:5432/test
        SECRET_KEY: test-secret-key-for-ci
        POSTMARK_API_TOKEN: test-token
        STRIPE_SECRET_KEY: sk_test_fake
        STRIPE_PUBLISHABLE_KEY: pk_test_fake
        STRIPE_WEBHOOK_SECRET: whsec_test_fake
      run: |
        export PYTHONPATH=$PWD
        pytest --cov=app --cov-report=xml --cov-report=term-missing --cov-fail-under=85

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v4
      with:
        file: ./sic_backend_mvp_jwt_sqlite/coverage.xml
        flags: backend
        name: backend-coverage
        fail_ci_if_error: true
        token: ${{ secrets.CODECOV_TOKEN }}

  security-scan:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python ${{ env.PYTHON_VERSION }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install safety bandit

    - name: Run Safety (dependency vulnerability check)
      run: safety check --output json > safety-report.json || true
      continue-on-error: true

    - name: Upload Safety results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: safety-results
        path: sic_backend_mvp_jwt_sqlite/safety-report.json