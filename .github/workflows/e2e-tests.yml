name: E2E Tests

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]
  schedule:
    # Run nightly tests at 2 AM UTC
    - cron: '0 2 * * *'

env:
  NODE_VERSION: '18'
  PYTHON_VERSION: '3.11'

jobs:
  e2e-tests:
    runs-on: ubuntu-latest
    timeout-minutes: 30

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: duespark_test
          POSTGRES_PASSWORD: test_password
          POSTGRES_DB: duespark_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    strategy:
      fail-fast: false
      matrix:
        browser: [chromium]
        test-suite: [smoke, happy-path, critical]

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: sic_app/package-lock.json

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'
          cache-dependency-path: sic_backend_mvp_jwt_sqlite/requirements.txt

      - name: Install backend dependencies
        run: |
          cd sic_backend_mvp_jwt_sqlite
          pip install -r requirements.txt
          pip install pytest-xdist  # For parallel testing

      - name: Install frontend dependencies
        run: |
          cd sic_app
          npm ci

      - name: Install Playwright browsers
        run: |
          cd sic_app
          npx playwright install --with-deps ${{ matrix.browser }}

      - name: Setup test database
        run: |
          cd sic_backend_mvp_jwt_sqlite
          export DATABASE_URL="postgresql://duespark_test:test_password@localhost:5432/duespark_test"
          alembic upgrade head

      - name: Start backend service
        run: |
          cd sic_backend_mvp_jwt_sqlite
          export DATABASE_URL="postgresql://duespark_test:test_password@localhost:5432/duespark_test"
          export SECRET_KEY="test-secret-key-for-ci-e2e-testing-$(date +%s)"
          export ENCRYPTION_KEY="test-encryption-key-for-ci-e2e-testing"
          export EMAIL_PROVIDER="console"  # Log emails to console instead of sending
          export STRIPE_SECRET_KEY="sk_test_fake_key_for_testing"
          export POSTMARK_SERVER_TOKEN="test-token"
          export EMAIL_FROM="test@duespark.com"
          python -m uvicorn app.main:app --host 0.0.0.0 --port 8005 &
          echo "BACKEND_PID=$!" >> $GITHUB_ENV

      - name: Wait for backend to be ready
        run: |
          timeout 60 bash -c 'while ! curl -f http://localhost:8005/healthz; do sleep 2; done'

      - name: Build frontend
        run: |
          cd sic_app
          export VITE_API_BASE_URL="http://localhost:8005"
          export VITE_APP_ENV="test"
          npm run build

      - name: Start frontend service
        run: |
          cd sic_app
          npm run preview -- --port 5173 --host &
          echo "FRONTEND_PID=$!" >> $GITHUB_ENV

      - name: Wait for frontend to be ready
        run: |
          timeout 60 bash -c 'while ! curl -f http://localhost:5173; do sleep 2; done'

      - name: Run E2E tests
        run: |
          cd sic_app
          export PLAYWRIGHT_BASE_URL="http://localhost:5173"
          export API_BASE_URL="http://localhost:8005"
          ./e2e/scripts/ci-commands.sh ${{ matrix.test-suite }} --browser ${{ matrix.browser }}

      - name: Upload test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: playwright-results-${{ matrix.browser }}-${{ matrix.test-suite }}
          path: |
            sic_app/playwright-report/
            sic_app/test-results/
            sic_app/screenshots/
          retention-days: 7

      - name: Upload test report as Pages artifact
        uses: actions/upload-pages-artifact@v2
        if: always() && matrix.browser == 'chromium' && matrix.test-suite == 'happy-path'
        with:
          path: sic_app/playwright-report/

      - name: Comment PR with test results
        uses: actions/github-script@v7
        if: always() && github.event_name == 'pull_request'
        with:
          script: |
            const fs = require('fs');
            const path = 'sic_app/playwright-report/results.json';

            let message = `## E2E Test Results (${{ matrix.browser }} - ${{ matrix.test-suite }})\\n\\n`;

            if (fs.existsSync(path)) {
              const results = JSON.parse(fs.readFileSync(path, 'utf8'));
              const { stats } = results;

              message += `- ‚úÖ Passed: ${stats.passed}\\n`;
              message += `- ‚ùå Failed: ${stats.failed}\\n`;
              message += `- ‚è≠Ô∏è Skipped: ${stats.skipped}\\n`;
              message += `- ‚è±Ô∏è Duration: ${Math.round(stats.duration / 1000)}s\\n`;

              if (stats.failed > 0) {
                message += `\\n### Failed Tests:\\n`;
                results.suites.forEach(suite => {
                  suite.specs.forEach(spec => {
                    if (spec.tests.some(test => test.status === 'failed')) {
                      message += `- ${spec.title}\\n`;
                    }
                  });
                });
              }
            } else {
              message += '‚ö†Ô∏è Test results not found';
            }

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: message
            });

      - name: Stop services
        if: always()
        run: |
          if [ -n "$BACKEND_PID" ]; then
            kill $BACKEND_PID || true
          fi
          if [ -n "$FRONTEND_PID" ]; then
            kill $FRONTEND_PID || true
          fi
          pkill -f "uvicorn app.main:app" || true
          pkill -f "vite preview" || true

  # Performance testing job
  performance-tests:
    runs-on: ubuntu-latest
    if: github.event_name == 'schedule' || contains(github.event.head_commit.message, '[perf]')
    timeout-minutes: 20

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: sic_app/package-lock.json

      - name: Install Lighthouse CI
        run: npm install -g @lhci/cli

      - name: Install frontend dependencies
        run: |
          cd sic_app
          npm ci

      - name: Build frontend
        run: |
          cd sic_app
          export VITE_API_BASE_URL="http://localhost:8005"
          npm run build

      - name: Start frontend service
        run: |
          cd sic_app
          npm run preview -- --port 5173 &

      - name: Wait for frontend
        run: |
          timeout 30 bash -c 'while ! curl -f http://localhost:5173; do sleep 1; done'

      - name: Run Lighthouse CI
        run: |
          lhci collect --url http://localhost:5173
          lhci assert

      - name: Upload Lighthouse results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: lighthouse-results
          path: .lighthouseci/
          retention-days: 7

  # Mobile testing job
  mobile-tests:
    runs-on: ubuntu-latest
    if: (github.event_name == 'push' && github.ref == 'refs/heads/main') || github.event_name == 'schedule'
    timeout-minutes: 25

    strategy:
      matrix:
        device: [mobile-chrome, mobile-safari]

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: sic_app/package-lock.json

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install dependencies
        run: |
          cd sic_backend_mvp_jwt_sqlite
          pip install -r requirements.txt
          cd ../sic_app
          npm ci
          npx playwright install --with-deps

      - name: Run mobile E2E tests
        run: |
          cd sic_app
          ./e2e/scripts/ci-commands.sh mobile --browser ${{ matrix.device }}

      - name: Upload mobile test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: mobile-test-results-${{ matrix.device }}
          path: |
            sic_app/playwright-report/
            sic_app/test-results/

  # Deploy test reports to GitHub Pages
  deploy-reports:
    runs-on: ubuntu-latest
    if: always() && github.ref == 'refs/heads/main'
    needs: [e2e-tests]

    permissions:
      pages: write
      id-token: write

    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}

    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4

  # Slack notification for test failures
  notify:
    runs-on: ubuntu-latest
    if: always() && (needs.e2e-tests.result == 'failure' || needs.performance-tests.result == 'failure')
    needs: [e2e-tests, performance-tests]

    steps:
      - name: Slack Notification
        uses: 8398a7/action-slack@v3
        if: env.SLACK_WEBHOOK_URL != ''
        with:
          status: failure
          channel: '#duespark-alerts'
          text: |
            üö® E2E Tests Failed!

            Repository: ${{ github.repository }}
            Branch: ${{ github.ref }}
            Commit: ${{ github.sha }}
            Author: ${{ github.actor }}

            Check the workflow run: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
