/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */


export interface paths {
  "/auth/register": {
    /** Register new user */
    post: {
      requestBody: {
        content: {
          "application/json": {
            /** Format: email */
            email: string;
            password: string;
          };
        };
      };
      responses: {
        /** @description JWT token (enveloped) */
        200: {
          content: {
            "application/json": components["schemas"]["EnvelopeToken"];
          };
        };
      };
    };
  };
  "/auth/login": {
    /** Login and get JWT token */
    post: {
      requestBody: {
        content: {
          "application/x-www-form-urlencoded": {
            username: string;
            password: string;
          };
        };
      };
      responses: {
        /** @description JWT token (enveloped) */
        200: {
          content: {
            "application/json": components["schemas"]["EnvelopeToken"];
          };
        };
      };
    };
  };
  "/clients": {
    /** List clients for current user (paginated) */
    get: {
      parameters: {
        query?: {
          limit?: number;
          offset?: number;
        };
      };
      responses: {
        /** @description OK */
        200: {
          content: {
            "application/json": components["schemas"]["EnvelopeClients"];
          };
        };
      };
    };
    /** Create new client */
    post: {
      requestBody: {
        content: {
          "application/json": {
            name: string;
            /** Format: email */
            email: string;
            timezone?: string;
            notes?: string;
          };
        };
      };
      responses: {
        /** @description Created client (enveloped) */
        200: {
          content: {
            "application/json": components["schemas"]["EnvelopeClient"];
          };
        };
      };
    };
  };
  "/clients/{id}": {
    /** Get client by id */
    get: {
      parameters: {
        path: {
          id: number;
        };
      };
      responses: {
        /** @description OK */
        200: {
          content: {
            "application/json": components["schemas"]["EnvelopeClient"];
          };
        };
      };
    };
    /** Update client */
    put: {
      parameters: {
        path: {
          id: number;
        };
      };
      requestBody: {
        content: {
          "application/json": {
            name?: string;
            /** Format: email */
            email?: string;
            timezone?: string;
            notes?: string;
          };
        };
      };
      responses: {
        /** @description Updated client */
        200: {
          content: {
            "application/json": components["schemas"]["EnvelopeClient"];
          };
        };
      };
    };
    /** Delete client */
    delete: {
      parameters: {
        path: {
          id: number;
        };
      };
      responses: {
        /** @description Deleted */
        200: {
          content: {
            "application/json": {
              data?: {
                id?: number;
              };
              meta?: Record<string, never>;
            };
          };
        };
      };
    };
  };
  "/invoices": {
    /** List invoices for current user (paginated) */
    get: {
      parameters: {
        query?: {
          limit?: number;
          offset?: number;
        };
      };
      responses: {
        /** @description OK */
        200: {
          content: {
            "application/json": components["schemas"]["EnvelopeInvoices"];
          };
        };
      };
    };
    /** Create invoice */
    post: {
      requestBody: {
        content: {
          "application/json": {
            client_id: number;
            amount_cents: number;
            currency?: string;
            /** Format: date */
            due_date: string;
            status?: string;
            external_id?: string;
            source?: string;
          };
        };
      };
      responses: {
        /** @description Created invoice (enveloped) */
        200: {
          content: {
            "application/json": components["schemas"]["EnvelopeInvoice"];
          };
        };
      };
    };
  };
  "/invoices/{id}": {
    /** Get invoice by id */
    get: {
      parameters: {
        path: {
          id: number;
        };
      };
      responses: {
        /** @description OK */
        200: {
          content: {
            "application/json": components["schemas"]["EnvelopeInvoice"];
          };
        };
      };
    };
    /** Update invoice */
    put: {
      parameters: {
        path: {
          id: number;
        };
      };
      requestBody: {
        content: {
          "application/json": {
            client_id?: number;
            amount_cents?: number;
            currency?: string;
            /** Format: date */
            due_date?: string;
            status?: string;
            external_id?: string;
            source?: string;
          };
        };
      };
      responses: {
        /** @description Updated invoice */
        200: {
          content: {
            "application/json": components["schemas"]["EnvelopeInvoice"];
          };
        };
      };
    };
    /** Delete invoice */
    delete: {
      parameters: {
        path: {
          id: number;
        };
      };
      responses: {
        /** @description Deleted */
        200: {
          content: {
            "application/json": {
              data?: {
                id?: number;
              };
              meta?: Record<string, never>;
            };
          };
        };
      };
    };
  };
  "/reminders": {
    /** List reminders for current user (paginated) */
    get: {
      parameters: {
        query?: {
          limit?: number;
          offset?: number;
        };
      };
      responses: {
        /** @description OK */
        200: {
          content: {
            "application/json": components["schemas"]["EnvelopeReminders"];
          };
        };
      };
    };
    /** Create reminder for invoice */
    post: {
      requestBody: {
        content: {
          "application/json": {
            invoice_id: number;
            /** Format: date-time */
            send_at: string;
            channel?: string;
            subject?: string;
            body?: string;
          };
        };
      };
      responses: {
        /** @description Created reminder (enveloped) */
        200: {
          content: {
            "application/json": components["schemas"]["EnvelopeReminder"];
          };
        };
      };
    };
  };
  "/reminders/{id}": {
    /** Get reminder by id */
    get: {
      parameters: {
        path: {
          id: number;
        };
      };
      responses: {
        /** @description OK */
        200: {
          content: {
            "application/json": components["schemas"]["EnvelopeReminder"];
          };
        };
      };
    };
    /** Update reminder */
    put: {
      parameters: {
        path: {
          id: number;
        };
      };
      requestBody: {
        content: {
          "application/json": {
            /** Format: date-time */
            send_at?: string;
            channel?: string;
            status?: string;
            subject?: string;
            body?: string;
          };
        };
      };
      responses: {
        /** @description Updated reminder */
        200: {
          content: {
            "application/json": components["schemas"]["EnvelopeReminder"];
          };
        };
      };
    };
    /** Delete reminder */
    delete: {
      parameters: {
        path: {
          id: number;
        };
      };
      responses: {
        /** @description Deleted */
        200: {
          content: {
            "application/json": {
              data?: {
                id?: number;
              };
              meta?: Record<string, never>;
            };
          };
        };
      };
    };
  };
  "/analytics/summary": {
    /** Analytics summary for current user */
    get: {
      responses: {
        /** @description OK */
        200: {
          content: {
            "application/json": {
              data?: Record<string, never>;
              meta?: Record<string, never>;
            };
          };
        };
      };
    };
  };
}

export type webhooks = Record<string, never>;

export interface components {
  schemas: {
    EnvelopeMeta: {
      limit?: number | null;
      offset?: number | null;
      total?: number | null;
    };
    EnvelopeToken: {
      data?: components["schemas"]["Token"];
      meta?: Record<string, never>;
    };
    EnvelopeClient: {
      data?: components["schemas"]["Client"];
      meta?: Record<string, never>;
    };
    EnvelopeClients: {
      data?: components["schemas"]["Client"][];
      meta?: components["schemas"]["EnvelopeMeta"];
    };
    EnvelopeInvoice: {
      data?: components["schemas"]["Invoice"];
      meta?: Record<string, never>;
    };
    EnvelopeInvoices: {
      data?: components["schemas"]["Invoice"][];
      meta?: components["schemas"]["EnvelopeMeta"];
    };
    EnvelopeReminder: {
      data?: components["schemas"]["Reminder"];
      meta?: Record<string, never>;
    };
    EnvelopeReminders: {
      data?: components["schemas"]["Reminder"][];
      meta?: components["schemas"]["EnvelopeMeta"];
    };
    Token: {
      access_token?: string;
      /** @example bearer */
      token_type?: string;
    };
    Client: {
      id?: number;
      name?: string;
      /** Format: email */
      email?: string;
      timezone?: string;
      notes?: string | null;
    };
    Invoice: {
      id?: number;
      client_id?: number;
      amount_cents?: number;
      currency?: string;
      /** Format: date */
      due_date?: string;
      /** @enum {string} */
      status?: "draft" | "pending" | "paid" | "overdue" | "cancelled";
      external_id?: string | null;
      source?: string;
      /** Format: date-time */
      created_at?: string;
    };
    Reminder: {
      id?: number;
      invoice_id?: number;
      /** Format: date-time */
      send_at?: string;
      /** @enum {string} */
      channel?: "email" | "sms" | "whatsapp";
      /** @enum {string} */
      status?: "scheduled" | "sent" | "failed" | "cancelled";
      subject?: string | null;
      body?: string | null;
    };
  };
  responses: never;
  parameters: never;
  requestBodies: never;
  headers: never;
  pathItems: never;
}

export type $defs = Record<string, never>;

export type external = Record<string, never>;

export type operations = Record<string, never>;
