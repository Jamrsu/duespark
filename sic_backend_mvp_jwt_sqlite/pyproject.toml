[build-system]
requires = ["setuptools", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "duespark-backend"
version = "0.1.0"
description = "DueSpark Backend - Invoice reminder automation platform"
authors = [{name = "DueSpark Team"}]
license = {text = "MIT"}
requires-python = ">=3.9"

[tool.black]
line-length = 88
target-version = ['py39']
include = '\.pyi?$'
exclude = '''
/(
    \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | _build
  | buck-out
  | build
  | dist
  | alembic/versions
)/
'''

[tool.isort]
profile = "black"
line_length = 88
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true
src_paths = ["app", "tests"]
skip_glob = ["alembic/versions/*"]

[tool.mypy]
python_version = "3.9"
warn_return_any = false  # Start permissive
warn_unused_configs = true
disallow_untyped_defs = false  # Start permissive, enable per-module
disallow_incomplete_defs = false  # Start permissive
check_untyped_defs = true
disallow_untyped_decorators = false  # Start permissive
no_implicit_optional = false  # Start permissive to avoid breaking changes
warn_redundant_casts = true
warn_unused_ignores = false  # Start permissive to avoid noise
warn_no_return = true
warn_unreachable = true
strict_equality = true
show_error_codes = true
# Allow gradual typing adoption
ignore_missing_imports = true

# Third-party module overrides
[[tool.mypy.overrides]]
module = [
    "stripe.*",
    "alembic.*",
    "passlib.*",
    "bcrypt.*",
    "prometheus_client.*",
    "apscheduler.*",
    "boto3.*",
    "bleach.*",
    "markdown.*",
    "jinja2.*",
    "httpx.*"
]
ignore_missing_imports = true

# Legacy modules - start with minimal type checking
[[tool.mypy.overrides]]
module = [
    "app.main",
    "app.scheduler",
    "app.models",
    "app.referral_service",
    "app.subscription_service",
    "app.stripe_webhooks"
]
# Only check for critical syntax errors
disable_error_code = [
    "attr-defined",
    "union-attr",
    "operator",
    "assignment",
    "arg-type",
    "return-value",
    "misc"
]

# Modules ready for stricter checking
[[tool.mypy.overrides]]
module = [
    "app.database",
    "app.auth",
    "app.email_templates",
    "app.email_provider"
]
disallow_untyped_defs = true
warn_return_any = true

# New modules should follow strict typing
[[tool.mypy.overrides]]
module = [
    "app.utils.*"
]
strict = true

[tool.pytest.ini_options]
minversion = "6.0"
addopts = "-ra -q --strict-markers --cov=app --cov-report=term-missing --cov-report=xml --cov-fail-under=85"
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests"
]

[tool.coverage.run]
source = ["app"]
omit = [
    "*/tests/*",
    "*/alembic/*",
    "*/__pycache__/*",
    "*/site-packages/*",
    "*/conftest.py"
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod"
]

[tool.bandit]
exclude_dirs = ["tests", "alembic/versions"]
skips = ["B101"]  # Skip assert_used test

[tool.bandit.assert_used]
skips = ["*_test.py", "test_*.py"]